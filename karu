<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry - cube</title>
		<meta charset="utf-8">
		<style>
			body {
				margin: 0px;
				background-color: #000000;
				overflow: hidden;
			}
		</style>
	</head>
	<body>

		<script src="three.js/build/three.min.js"></script>
		<script src="three.js/build/three.js"></script>
 		// <script src="three.js/src/renderers/WebGLRenderer.js"></script>
		<script src="three.js/src/materials/MeshPhongMaterial.js"></script>
		// <script src="three.js/src/loaders/MaterialLoader.js"></script>
		// <script src="three.js/src/textures/Texture.js"></script>
		// <script src="three.js/src/loaders/TextureLoader.js"></script>
		<script>

			var camera, scene, renderer;
			var cube, item;



			init();
			animate();


			function init() {
			// Scene
				scene = new THREE.Scene();


			// Camera
				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.z = 400;


			// Renderer
				renderer = new THREE.WebGLRenderer();
				renderer.setClearColor( 0xbfd1e5 );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );


			// Events
				window.addEventListener( 'resize', onWindowResize, false );
				window.addEventListener( 'keydown', keyDownHandler, false);


			// Grid
				var size = 500, step = 10;
				var geometry = new THREE.Geometry();
				var material = new THREE.LineBasicMaterial( { color: 0x303030 } );
				for ( var i = - size; i <= size; i += step ) {

					geometry.vertices.push( new THREE.Vector3( - size, - 0.04, i ) );
					geometry.vertices.push( new THREE.Vector3(   size, - 0.04, i ) );

					geometry.vertices.push( new THREE.Vector3( i, - 0.04, - size ) );
					geometry.vertices.push( new THREE.Vector3( i, - 0.04,   size ) );
				}
				var line = new THREE.Line( geometry, material, THREE.LinePieces );
				scene.add( line );


			// Cube
				var geometry = new THREE.BoxGeometry( 100, 100, 100 );
				var material = new THREE.MeshPhongMaterial( { color:  'rgb(255,0,0)', emissive: 0x200000, wireframe:false } );

				cube = new THREE.Mesh( geometry, material);
				scene.add( cube );
				cube.position.set(0, 100/2, 0);	
				

			// Light
				var light = new THREE.AmbientLight( 0x808080 );
				scene.add( light );


			// item
				var geometry2 = new THREE.BoxGeometry( 50, 50, 50 );
				//var material = new THREE.MeshLambertMaterial( { color: 'rgb(255,0,0)', emissive: 0x200000 } );
				var material2 = new THREE.MeshBasicMaterial( { color: 0x0000ff, wireframe:true } );
				item = new THREE.Mesh( geometry2, material2);
				scene.add( item );
				item.position.set(100, 50/2, 0);	

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				requestAnimationFrame( animate )

				renderer.render( scene, camera );

			}

			// Funktion zur Steuerung
			function keyDownHandler(event) {
				var step = 5;
			// key left
				if ( event.keyCode === 37) {
					// if barrier -> stop
					// if item -> update itemlist
					cube.position.x += -step;
					cube.position.y += 0;
					// camera moves
					camera.position.x += -step;
					camera.position.y += 0;
					checkItem();
				}
			// key up
				else if( event.keyCode === 38 ) {
					cube.position.y += 0;
					cube.position.z += -step;
					camera.position.y += 0;
					camera.position.z += -step;
					checkItem();
				} 
			// key right
				else if ( event.keyCode === 39 ) {
					cube.position.x += step;
					cube.position.y += 0;
					camera.position.x += step;
					camera.position.y += 0;
					checkItem();
				}
			// key down
				else if ( event.keyCode === 40 ) {
					cube.position.y += 0;
					cube.position.z += step;
					camera.position.y += 0;
					camera.position.z += step;
					checkItem();
				}

				// camera position external
			// up with w
				else if ( event.keyCode === 87 ) {
					camera.position.y += step;
				}
			// down with s
				else if ( event.keyCode === 83 ) {
					camera.position.y += -step;
				}
			// right with d
				else if ( event.keyCode === 68 ) {
					camera.position.x += step;
				}
			// left with a
				else if ( event.keyCode === 65 ) {
					camera.position.x += -step;
				}
			// angle down with y
				else if ( event.keyCode === 89 ) {
					camera.rotation.x += 50;
				}
			// angle up q
				else if ( event.keyCode === 81 ) {
					camera.rotation.x += -50;
				}
			}

			// Funktion um Items aufzusammeln
			function checkItem() {
    
			}		
		</script>
	</body>
</html>
